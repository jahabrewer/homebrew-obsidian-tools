# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class NoteCompiler < Formula
  desc "A cross-platform Go CLI tool for compiling markdown notes"
  homepage "https://github.com/jahabrewer/note-compiler"
  version "1.0.6"
  license "GPL-3.0"

  on_macos do
    on_intel do
      url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.6/obsidian-tools_Darwin_x86_64.tar.gz"
      sha256 "46fabebc5f5f2741b1634bc29b5708faef6c3afe411efee5b000c864cc41be63"

      def install
        bin.install "note-compiler"

        # Generate and install shell completions
        output = Utils.popen_read("#{bin}/note-compiler completion bash")
        (bash_completion/"note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion zsh")
        (zsh_completion/"_note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion fish")
        (fish_completion/"note-compiler.fish").write output
      end
    end
    on_arm do
      url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.6/obsidian-tools_Darwin_arm64.tar.gz"
      sha256 "c3a436e3047d877fd13a9eeb601c5c7d49ff7c61c4fe280c7020529ac841d4ed"

      def install
        bin.install "note-compiler"

        # Generate and install shell completions
        output = Utils.popen_read("#{bin}/note-compiler completion bash")
        (bash_completion/"note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion zsh")
        (zsh_completion/"_note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion fish")
        (fish_completion/"note-compiler.fish").write output
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.6/obsidian-tools_Linux_x86_64.tar.gz"
        sha256 "76e825049d5c3206025f4879519b056b4db2af4b8c345e31f1caa79dc860d868"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
    on_arm do
      if !Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.6/obsidian-tools_Linux_armv6.tar.gz"
        sha256 "22bd049b30fb80382e5c4ac4bbef0a509ed789b9fb3d33ce76ce175af019bbfb"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.6/obsidian-tools_Linux_arm64.tar.gz"
        sha256 "3500c851db82f3394a4fc2eb63b732d4a742daf1f18a3383e35d976167e28fc4"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
  end

  test do
    system "#{bin}/note-compiler", "version"
  end
end
