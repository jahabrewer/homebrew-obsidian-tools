# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class NoteCompiler < Formula
  desc "A cross-platform Go CLI tool for compiling markdown notes"
  homepage "https://github.com/jahabrewer/note-compiler"
  version "1.0.4"
  license "GPL-3.0"

  on_macos do
    on_intel do
      url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.4/obsidian-tools_Darwin_x86_64.tar.gz"
      sha256 "c55274230a5b4936528f36b738b72128474ec9cc820c8c462d1c9a76a3b7c395"

      def install
        bin.install "note-compiler"

        # Generate and install shell completions
        output = Utils.popen_read("#{bin}/note-compiler completion bash")
        (bash_completion/"note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion zsh")
        (zsh_completion/"_note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion fish")
        (fish_completion/"note-compiler.fish").write output
      end
    end
    on_arm do
      url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.4/obsidian-tools_Darwin_arm64.tar.gz"
      sha256 "d7ffac01e82aef6dd851a469a2657de7e6323b1b86dec4acd6b11c145e3a8609"

      def install
        bin.install "note-compiler"

        # Generate and install shell completions
        output = Utils.popen_read("#{bin}/note-compiler completion bash")
        (bash_completion/"note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion zsh")
        (zsh_completion/"_note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion fish")
        (fish_completion/"note-compiler.fish").write output
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.4/obsidian-tools_Linux_x86_64.tar.gz"
        sha256 "7f23e2738b1138d7a26e683ed7e7aefccbd2aa6fe1341bc5017270d01769260d"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
    on_arm do
      if !Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.4/obsidian-tools_Linux_armv6.tar.gz"
        sha256 "070be631b07034cc04f50a410c48c515b43f2e83c2f457aa91da9377c585cea8"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.4/obsidian-tools_Linux_arm64.tar.gz"
        sha256 "2f1f131f90833eba33d9d0bc9c9319a85698fb86b7ee7ebe8ca278eac08add66"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
  end

  test do
    system "#{bin}/note-compiler", "--version"
  end
end
