# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class NoteCompiler < Formula
  desc "A cross-platform Go CLI tool for compiling markdown notes"
  homepage "https://github.com/jahabrewer/note-compiler"
  version "1.0.5"
  license "GPL-3.0"

  on_macos do
    on_intel do
      url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.5/obsidian-tools_Darwin_x86_64.tar.gz"
      sha256 "142cefaa348ac6c570f66eddca228b70641cc3b2ee40de20ebbf3e315ebef694"

      def install
        bin.install "note-compiler"

        # Generate and install shell completions
        output = Utils.popen_read("#{bin}/note-compiler completion bash")
        (bash_completion/"note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion zsh")
        (zsh_completion/"_note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion fish")
        (fish_completion/"note-compiler.fish").write output
      end
    end
    on_arm do
      url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.5/obsidian-tools_Darwin_arm64.tar.gz"
      sha256 "c74c6f24d99a9374fc230ca95e6d071ef0c2e2224eed22298f42f7eb7ce9aa18"

      def install
        bin.install "note-compiler"

        # Generate and install shell completions
        output = Utils.popen_read("#{bin}/note-compiler completion bash")
        (bash_completion/"note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion zsh")
        (zsh_completion/"_note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion fish")
        (fish_completion/"note-compiler.fish").write output
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.5/obsidian-tools_Linux_x86_64.tar.gz"
        sha256 "b1de1c103e279490b31090051bed5f1c9931dd16f1b97fa66612eec044852bbc"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
    on_arm do
      if !Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.5/obsidian-tools_Linux_armv6.tar.gz"
        sha256 "9e53df38829b778139296af7259c48eedeace3747deddca1a1441402b068e34b"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.0.5/obsidian-tools_Linux_arm64.tar.gz"
        sha256 "8108874af66fa88f1b7e6ab63e2fa51db17e93bbacfba64abf7a0bef4646bf17"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
  end

  test do
    system "#{bin}/note-compiler", "--version"
  end
end
