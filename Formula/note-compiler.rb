# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class NoteCompiler < Formula
  desc "A cross-platform Go CLI tool for compiling markdown notes"
  homepage "https://github.com/jahabrewer/note-compiler"
  version "1.2.0"
  license "GPL-3.0"

  on_macos do
    on_intel do
      url "https://github.com/jahabrewer/note-compiler/releases/download/v1.2.0/obsidian-tools_Darwin_x86_64.tar.gz"
      sha256 "a03c6b9c7c8baaa2d420a13050f717c62121720defc8c4f6b9922ad8dc17f3fc"

      def install
        bin.install "note-compiler"

        # Generate and install shell completions
        output = Utils.popen_read("#{bin}/note-compiler completion bash")
        (bash_completion/"note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion zsh")
        (zsh_completion/"_note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion fish")
        (fish_completion/"note-compiler.fish").write output
      end
    end
    on_arm do
      url "https://github.com/jahabrewer/note-compiler/releases/download/v1.2.0/obsidian-tools_Darwin_arm64.tar.gz"
      sha256 "ebd614de151bab80c8bf55c3dc2e3aff3e827a8a88275b9a62882dc51033ea5a"

      def install
        bin.install "note-compiler"

        # Generate and install shell completions
        output = Utils.popen_read("#{bin}/note-compiler completion bash")
        (bash_completion/"note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion zsh")
        (zsh_completion/"_note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion fish")
        (fish_completion/"note-compiler.fish").write output
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.2.0/obsidian-tools_Linux_x86_64.tar.gz"
        sha256 "ab13bf6c87da4e3e9196ae277c6c3e586af103d7c8be1aed0795db26ee8e0721"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
    on_arm do
      if !Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.2.0/obsidian-tools_Linux_armv6.tar.gz"
        sha256 "05efb1ab7e37cb1bcc128af6d41f0ec673375478fee146a5c3cd7bff2c69cf60"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.2.0/obsidian-tools_Linux_arm64.tar.gz"
        sha256 "c9cee6c2def7d3b9e53ca508fcd63aee43cea3ac0ce3068ade5ed7867b6f88d4"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
  end

  test do
    system "#{bin}/note-compiler", "version"
  end
end
