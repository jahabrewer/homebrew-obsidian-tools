# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class NoteCompiler < Formula
  desc "A cross-platform Go CLI tool for compiling markdown notes"
  homepage "https://github.com/jahabrewer/note-compiler"
  version "1.1.0"
  license "GPL-3.0"

  on_macos do
    on_intel do
      url "https://github.com/jahabrewer/note-compiler/releases/download/v1.1.0/obsidian-tools_Darwin_x86_64.tar.gz"
      sha256 "2d9e18813691e5bc6aee98de6a0aaa9cb4d320bcfdbb89483c59f07389191e77"

      def install
        bin.install "note-compiler"

        # Generate and install shell completions
        output = Utils.popen_read("#{bin}/note-compiler completion bash")
        (bash_completion/"note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion zsh")
        (zsh_completion/"_note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion fish")
        (fish_completion/"note-compiler.fish").write output
      end
    end
    on_arm do
      url "https://github.com/jahabrewer/note-compiler/releases/download/v1.1.0/obsidian-tools_Darwin_arm64.tar.gz"
      sha256 "b4c72bd3d49fcdb53755a0e9bd1cddfa807d851c6eba34b4bc62e4d27de5efb8"

      def install
        bin.install "note-compiler"

        # Generate and install shell completions
        output = Utils.popen_read("#{bin}/note-compiler completion bash")
        (bash_completion/"note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion zsh")
        (zsh_completion/"_note-compiler").write output

        output = Utils.popen_read("#{bin}/note-compiler completion fish")
        (fish_completion/"note-compiler.fish").write output
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.1.0/obsidian-tools_Linux_x86_64.tar.gz"
        sha256 "95c6d52852f3e5e9f3fc17408f00dc55ac98ee59bd45f1aa19dedb54db6ecf6e"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
    on_arm do
      if !Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.1.0/obsidian-tools_Linux_armv6.tar.gz"
        sha256 "abf777725ed3e7402bce17cdc270193092efdd7fb3143c8ee4402b51cb47fd60"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/jahabrewer/note-compiler/releases/download/v1.1.0/obsidian-tools_Linux_arm64.tar.gz"
        sha256 "f5511f9a8125cfa3a3a8712f58395e7c20f13af59452a8de530b325a3a5845d1"

        def install
          bin.install "note-compiler"

          # Generate and install shell completions
          output = Utils.popen_read("#{bin}/note-compiler completion bash")
          (bash_completion/"note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion zsh")
          (zsh_completion/"_note-compiler").write output

          output = Utils.popen_read("#{bin}/note-compiler completion fish")
          (fish_completion/"note-compiler.fish").write output
        end
      end
    end
  end

  test do
    system "#{bin}/note-compiler", "version"
  end
end
